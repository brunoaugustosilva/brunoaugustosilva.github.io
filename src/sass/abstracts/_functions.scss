// -----------------------------------------------------------------------------
// This file contains all application-wide Sass functions.
// -----------------------------------------------------------------------------
/// Native `url(..)` function wrapper
/// @param {String} $base - base URL for the asset
/// @param {String} $type - asset type folder (e.g. `fonts/`)
/// @param {String} $path - asset path
/// @return {Url}

@function asset($base, $type, $path){
    @return url('#{$base}#{$type}#{$path}');
} 

/// Returns URL to an image based on its path
/// @param {String} $path - image path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url

@function image($path, $base: $base-url){
    @return asset($base, 'images/', $path);
} 

/// Returns URL to a font based on its path
/// @param {String} $path - font path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url

@function font($path, $base: $base-url){
    @return asset($base, 'fonts/', $path);
}

/// Clarear ligeiramente uma cor
/// @access public
/// @param {Color} $color - cor
/// @param {Number} $percentage - percentagem da `$color` na cor devolvida
/// @return {Color}
@function tint($color, $percentage) {
    @return mix($color, white, $percentage);
}

/// Escurecer ligeiramente uma cor
/// @access public
/// @param {Color} $color - cor
/// @param {Number} $percentage - percentagem da `$color` na cor devolvida
/// @return {Color}
@function shade($color, $percentage) {
    @return mix($color, black, $percentage);
}

/// Gestor Responsivo
/// @access public
/// @param {String} $breakpoint - Breakpoint
/// @requires $breakpoints

@mixin media($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        @media #{inspect(map-get($breakpoints, $breakpoint))} {
            @content;
        }
    }

    @else {
        @error 'No value found for `#{$breakpoint}`. '
            + 'Please make sure it is defined in `$breakpoints` map.';
    }
}

/// Potenciacao
/// @access public
/// @param {Number} $number - numero
/// @param {Number} $expoent - expoente
/// @return {Number}

@function pow($number, $exponent) {
    $value: 1;

    @if $exponent > 0 {
        @for $i from 1 through $exponent {
            $value: $value * $number;
        }
    }

    @return $value;
}

/// Proporção aurea de texto
/// @access public
/// @param {Number} $size - tamanho da fonte
/// @return {Number}

@function ms($size){
    @return map-get($modularscale, base) * pow(map-get($modularscale, ratio), $size);
}

/// Function to generate long shadows (because flat is so has-been).
/// Property-agnostic: works for both `box-shadow` and `text-shadow`.
/// `cos` and `sin` might need to be polyfilled if Compass or any 
/// equivalent such as SassyMath is not in use.
///
/// @author Hugo Giraudel
///
/// @link https://unindented.org/articles/trigonometry-in-sass/ Pure Sass `cos` and `sin`
///
/// @param {Direction} $direction
///     Shadow's direction (angle or keyword)
/// @param {Length} $length
///     Shadow's length
/// @param {Color} $color
///     Shadow's color
/// @param {Bool | Color} $fade [false]
///     Whether or not shadow should fade: 
///     - `false` means no fading, shadow is `$color`
///     - `true`  means fading from `$color` to transparent
///     - a color means fading from `$color` to `$fade`
/// @param {Number} $shadow-count [100]
///     Number of computed shadows
///
/// @return {List} - List of shadows
///
/// @require {function} Compass/helpers/math/cos
///     http://compass-style.org/reference/compass/helpers/math/#cos
/// @require {function} Compass/helpers/math/sin
///     http://compass-style.org/reference/compass/helpers/math/#sin
///
/// @example scss - Usage
/// .foo {
///   text-shadow: long-shadow(42deg, 1em, #16a085);
/// }
/// .bar {
///   box-shadow: long-shadow(to top left, 150px, hotpink, tomato);
/// }

@function long-shadow($color) {
    $color: tint($color, 30);
    $val: 0 0 $color;
    @for $i from 1 through 200 {
      $val: #{$val}, #{$i}px #{$i}px #{$color};
    }
    @return $val;
  }

/// Sombras de texto

@mixin long-shadow($color) {
    text-shadow: long-shadow($color);
}

/// Tamanho de box model
/// @access public
/// @param {Number} $width - Largura
/// @param {Number} $height - Altura
/// @requires $width

@mixin size($width, $height: $width){
    width: $width;
    height: $height;
}

/// Justificação de texto
/// @access public
/// @param {String} $justify - Justificação
/// @requires $justify

@function text($justify){
}
